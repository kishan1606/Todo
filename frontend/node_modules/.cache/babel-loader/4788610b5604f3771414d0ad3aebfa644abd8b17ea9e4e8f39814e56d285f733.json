{"ast":null,"code":"function Validation(values) {\n  let error = {};\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const password_pattern = /^.{9,}$/;\n  if (values.name === \"\") {\n    error.name = \"Name should not be empty\";\n  } else {\n    error.name = \"\";\n  }\n  if (values.username === \"\") {\n    error.username = \"Username should not be empty\";\n  } else {\n    error.username = \"\";\n  }\n  if (values.email === \"\") {\n    error.email = \"Email should not be empty\";\n  } else if (!email_pattern.test(values.email)) {\n    error.email = \"Email must be in format a-z@a-z.com\";\n  } else {\n    error.email = \"\";\n  }\n  if (values.password === \"\") {\n    error.password = \"Password should not be empty\";\n  } else if (!password_pattern.test(values.password)) {\n    error.password = \"Password should atleast 8 character\";\n  } else {\n    error.password = \"\";\n  }\n  return error;\n}\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["Validation","values","error","email_pattern","password_pattern","name","username","email","test","password","_c","$RefreshReg$"],"sources":["C:/Users/patel/Desktop/angular/React/todo/frontend/src/login/SignupValidation.jsx"],"sourcesContent":["function Validation(values) {\r\n  let error = {};\r\n\r\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  const password_pattern = /^.{9,}$/;\r\n\r\n  if (values.name === \"\") {\r\n    error.name = \"Name should not be empty\";\r\n  } else {\r\n    error.name = \"\";\r\n  }\r\n  if (values.username === \"\") {\r\n    error.username = \"Username should not be empty\";\r\n  } else {\r\n    error.username = \"\";\r\n  }\r\n  \r\n  if (values.email === \"\") {\r\n    error.email = \"Email should not be empty\";\r\n  } else if (!email_pattern.test(values.email)) {\r\n    error.email = \"Email must be in format a-z@a-z.com\";\r\n  } else {\r\n    error.email = \"\";\r\n  }\r\n  if (values.password === \"\") {\r\n    error.password = \"Password should not be empty\";\r\n  } else if (!password_pattern.test(values.password)) {\r\n    error.password = \"Password should atleast 8 character\";\r\n  } else {\r\n    error.password = \"\";\r\n  }\r\n  return error;\r\n}\r\nexport default Validation;\r\n"],"mappings":"AAAA,SAASA,UAAUA,CAACC,MAAM,EAAE;EAC1B,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,MAAMC,aAAa,GAAG,4BAA4B;EAElD,MAAMC,gBAAgB,GAAG,SAAS;EAElC,IAAIH,MAAM,CAACI,IAAI,KAAK,EAAE,EAAE;IACtBH,KAAK,CAACG,IAAI,GAAG,0BAA0B;EACzC,CAAC,MAAM;IACLH,KAAK,CAACG,IAAI,GAAG,EAAE;EACjB;EACA,IAAIJ,MAAM,CAACK,QAAQ,KAAK,EAAE,EAAE;IAC1BJ,KAAK,CAACI,QAAQ,GAAG,8BAA8B;EACjD,CAAC,MAAM;IACLJ,KAAK,CAACI,QAAQ,GAAG,EAAE;EACrB;EAEA,IAAIL,MAAM,CAACM,KAAK,KAAK,EAAE,EAAE;IACvBL,KAAK,CAACK,KAAK,GAAG,2BAA2B;EAC3C,CAAC,MAAM,IAAI,CAACJ,aAAa,CAACK,IAAI,CAACP,MAAM,CAACM,KAAK,CAAC,EAAE;IAC5CL,KAAK,CAACK,KAAK,GAAG,qCAAqC;EACrD,CAAC,MAAM;IACLL,KAAK,CAACK,KAAK,GAAG,EAAE;EAClB;EACA,IAAIN,MAAM,CAACQ,QAAQ,KAAK,EAAE,EAAE;IAC1BP,KAAK,CAACO,QAAQ,GAAG,8BAA8B;EACjD,CAAC,MAAM,IAAI,CAACL,gBAAgB,CAACI,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,EAAE;IAClDP,KAAK,CAACO,QAAQ,GAAG,qCAAqC;EACxD,CAAC,MAAM;IACLP,KAAK,CAACO,QAAQ,GAAG,EAAE;EACrB;EACA,OAAOP,KAAK;AACd;AAACQ,EAAA,GAjCQV,UAAU;AAkCnB,eAAeA,UAAU;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}